* Git Github SourceTree
#+BEGIN_EXAMPLE
该文档主要纪录Git Github SourceTree相关工具的使用。
#+END_EXAMPLE

** 常用命令
*** git
**** project manager
#+BEGIN_EXAMPLE
克隆默认分支的代码 git clone git://github.com/cocos2d/CocosBuilder.git ./CocosBuilder_origin_default
克隆指定分支的代码 git clone -b develop git://github.com/cocos2d/CocosBuilder.git ./CocosBuilder_origin_develop
在本地初始化一个空仓库			git init
获得本地分支信息                   	git branch
创建新的本地分支                    git branch new_branch_name
切换分支                            git checkout des_branch_name
查看git branch帮助                  git help branch
获得romote信息                     	git remote (git remote -v)
添加新的remote                     	git remote add <remote_name> <remote_url>
删除一个remote                     	git remote rm <remote_name>
重命名一个remote                   	git remote rename <remote_old_name> <remote_new_name>
以本地代码为基础创建新的remote分支     	git push <remote_name> <local_branch>:<remote_branch>
删除remote的一个分支                   	git push <remote_name> :<remote_branch>
添加子工程                             	git submodule add 仓库地址 路径
删除子工程
#+END_EXAMPLE
**** content manager
#+BEGIN_EXAMPLE
取消本地内容修改 			git reset --hard
#+END_EXAMPLE
*** git svn
#+BEGIN_EXAMPLE
克隆svn仓库到本地仓库   git svn clone http://your.svn.url/svn/Demo
同步svn仓库到本地仓库   git svn rebase
将修改添加到本地仓库    git add/commit
将本地仓库同步到svn仓库 git svn dcommit (git svn dcommit 不会将本地的多个版本按时间顺序提交给svn服务器，而是将这些合为一个进行提交)
处理代码冲突的步骤：
（1）git svn dcommit 时提示需要更新,执行git svn rebase
（2）解决冲突，执行 git add confilict.files 告知git已经解决冲突
（3）执行 git rebase --continue 自己对confilict.files的修改进入到本地仓库
（4）执行 git svn dcommit 将改动同步到svn仓库
#+END_EXAMPLE

** 更新自己fork出来的源代码
#+BEGIN_EXAMPLE
问题说明：
从 https://github.com/cocos2d/CocosBuilder fork出来一份CocosBuilder的源代码MyCocosBuilder，
过一段时间以后，原来的CocosBuilder的develop分支有更新，需要将CocosBuilder/develop的更新添加到MyCocosBuilder/develop中。
操作方法：
(1)获得最新MyCocosBuilder/develop源代码
git clone -b develop https://github.com/wolfand11/CocosBuilder_v2_1.git ./MyCocosBuilder
cd MyCocosBuilder
git submodule update --init --recursive
(2)添加新的远程库
执行命令 git remote add real_origin https://github.com/cocos2d/CocosBuilder
(3)获得real_origin/develop
git fetch real_origin develop
(4)Merge修改到本地代码
git merge real_origin/develop
(5)更新origin/develop分支
push本地的develop分支到origin/develop分支。即https://github.com/wolfand11/CocosBuilder_v2_1.git的develop分支
#+END_EXAMPLE

** 在自己fork出来的源代码中，以最新源码为基础创建新分支
#+BEGIN_EXAMPLE
问题说明：
从 https://github.com/cocos2d/CocosBuilder fork出来一份CocosBuilder的源代码MyCocosBuilder，
并且在MyCocosBuilder/develop分支的基础上添加自己的分支v2_0，.过一段时间以后，需要添加分支MyCocosBuilder/v3_0，
并且要求My_v3_0以最新的CocosBuilder/develop(或者CocosBuilder/master)为基础。
操作方法：
(1)获得最新CocosBuilder/develop源代码
git clone -b develop git://github.com/cocos2d/CocosBuilder.git ./MyCocosBuilder/CocosBuilder_v3_0
cd MyCocosBuilder/CocosBuilder_v3_0
git submodule update --init --recursive
(2)添加新的远程库
执行命令 git remote add my_resource https://github.com/wolfand11/CocosBuilder_v2_1
(3)将本地develop分支push到my_resource
git push my_source develop:v3_1
#+END_EXAMPLE


** 库管理方案
*** 库管理流程
#+BEGIN_EXAMPLE
1 初始化
（1）fork lib source
（2）以自己依赖的分支为基础，创建自己的分支
2 维护
方案1：简单粗暴法
使用最新库源代码，覆盖当前自己的分支，然后merge变化
方案2：
参考上面的文档：更新自己fork出来的源代码
#+END_EXAMPLE
*** 项目命名 分支命名规则 CommitLog规则
#+BEGIN_EXAMPLE
自己的代码
1、项目名称以及分支名称可以参照其他开源项目命名方案。

Fork出来的代码
1、项目名称前面加My。例如：MyCocosBuilder Mycocos2d-x
2、加分支时，分支的命名前加My_。例如：My_v2_1 My_v3_0
3、commit时，如果修改了原来源代码的，日志前加[ChangeOrigin]
#+END_EXAMPLE
